{{define "floating"}}
{{template "signal_header" .}}
// {{ .Name }} is {{ .Builtin }} floating-point signal.
type {{ .Name }} struct {
	buffer []{{ .Builtin }}
	channels
}

// {{ .Allocator }} allocates a new sequential {{ .Builtin }} signal buffer.
func (a Allocator) {{ .Allocator }}() {{ .Interface }} {
	return &{{ .Name }}{
		buffer:   make([]{{ .Builtin }}, a.Channels*a.Length, a.Channels*a.Capacity),
		channels: channels(a.Channels),
	}
}

// Get{{ .Allocator }} selects a new sequential {{ .Builtin }} signal buffer.
// from the pool.
func (p *PoolAllocator) Get{{ .Allocator }}() {{ .Interface }} {
	s := p.{{ .Name }}.Get().(*{{ .Name }})
	s.channels = channels(p.Channels)
	s.buffer = s.buffer[:p.Length*p.Channels]
	return s
}

// AppendSample appends sample at the end of the buffer.
// Sample is not appended if buffer capacity is reached.
func (s *{{ .Name }}) AppendSample(value {{ .SampleType }}) {
	if len(s.buffer) == cap(s.buffer) {
		return
	}
	s.buffer = append(s.buffer, {{ .Builtin }}(value))
}

// SetSample sets sample value for provided index.
func (s *{{ .Name }}) SetSample(i int, value {{ .SampleType }}) {
	s.buffer[i] = {{ .Builtin }}(value)
}
{{template "signal" .}}
{{end}}